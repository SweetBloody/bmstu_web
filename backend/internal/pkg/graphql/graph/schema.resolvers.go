package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"example/graph/model"
	"fmt"
)

// CreateDriver is the resolver for the createDriver field.
func (r *mutationResolver) CreateDriver(ctx context.Context, data model.DriverInput) (*model.Driver, error) {
	panic(fmt.Errorf("not implemented: CreateDriver - createDriver"))
}

// UpdateDriver is the resolver for the updateDriver field.
func (r *mutationResolver) UpdateDriver(ctx context.Context, id int, data model.DriverInput) (*model.Driver, error) {
	panic(fmt.Errorf("not implemented: UpdateDriver - updateDriver"))
}

// DeleteDriver is the resolver for the deleteDriver field.
func (r *mutationResolver) DeleteDriver(ctx context.Context, id int) (*model.Driver, error) {
	panic(fmt.Errorf("not implemented: DeleteDriver - deleteDriver"))
}

// CreateGrandPrix is the resolver for the createGrandPrix field.
func (r *mutationResolver) CreateGrandPrix(ctx context.Context, data model.GrandPrixInput) (*model.GrandPrix, error) {
	panic(fmt.Errorf("not implemented: CreateGrandPrix - createGrandPrix"))
}

// UpdateGrandPrix is the resolver for the updateGrandPrix field.
func (r *mutationResolver) UpdateGrandPrix(ctx context.Context, id int, data model.GrandPrixInput) (*model.GrandPrix, error) {
	panic(fmt.Errorf("not implemented: UpdateGrandPrix - updateGrandPrix"))
}

// DeleteGrandPrix is the resolver for the deleteGrandPrix field.
func (r *mutationResolver) DeleteGrandPrix(ctx context.Context, id int) (*model.GrandPrix, error) {
	panic(fmt.Errorf("not implemented: DeleteGrandPrix - deleteGrandPrix"))
}

// CreateQualResult is the resolver for the createQualResult field.
func (r *mutationResolver) CreateQualResult(ctx context.Context, data model.QualResultInput) (*model.QualResult, error) {
	panic(fmt.Errorf("not implemented: CreateQualResult - createQualResult"))
}

// UpdateQualResult is the resolver for the updateQualResult field.
func (r *mutationResolver) UpdateQualResult(ctx context.Context, id int, data model.QualResultInput) (*model.QualResult, error) {
	panic(fmt.Errorf("not implemented: UpdateQualResult - updateQualResult"))
}

// DeleteQualResult is the resolver for the deleteQualResult field.
func (r *mutationResolver) DeleteQualResult(ctx context.Context, id int) (*model.QualResult, error) {
	panic(fmt.Errorf("not implemented: DeleteQualResult - deleteQualResult"))
}

// CreateRaceResult is the resolver for the createRaceResult field.
func (r *mutationResolver) CreateRaceResult(ctx context.Context, data model.RaceResultInput) (*model.RaceResult, error) {
	panic(fmt.Errorf("not implemented: CreateRaceResult - createRaceResult"))
}

// UpdateRaceResult is the resolver for the updateRaceResult field.
func (r *mutationResolver) UpdateRaceResult(ctx context.Context, id int, data model.RaceResultInput) (*model.RaceResult, error) {
	panic(fmt.Errorf("not implemented: UpdateRaceResult - updateRaceResult"))
}

// DeleteRaceResult is the resolver for the deleteRaceResult field.
func (r *mutationResolver) DeleteRaceResult(ctx context.Context, id int) (*model.RaceResult, error) {
	panic(fmt.Errorf("not implemented: DeleteRaceResult - deleteRaceResult"))
}

// CreateTeam is the resolver for the createTeam field.
func (r *mutationResolver) CreateTeam(ctx context.Context, data model.TeamInput) (*model.Team, error) {
	panic(fmt.Errorf("not implemented: CreateTeam - createTeam"))
}

// UpdateTeam is the resolver for the updateTeam field.
func (r *mutationResolver) UpdateTeam(ctx context.Context, id int, data model.TeamInput) (*model.Team, error) {
	panic(fmt.Errorf("not implemented: UpdateTeam - updateTeam"))
}

// DeleteTeam is the resolver for the deleteTeam field.
func (r *mutationResolver) DeleteTeam(ctx context.Context, id int) (*model.Team, error) {
	panic(fmt.Errorf("not implemented: DeleteTeam - deleteTeam"))
}

// CreateTrack is the resolver for the createTrack field.
func (r *mutationResolver) CreateTrack(ctx context.Context, data model.TrackInput) (*model.Track, error) {
	panic(fmt.Errorf("not implemented: CreateTrack - createTrack"))
}

// UpdateTrack is the resolver for the updateTrack field.
func (r *mutationResolver) UpdateTrack(ctx context.Context, id int, data model.TrackInput) (*model.Track, error) {
	panic(fmt.Errorf("not implemented: UpdateTrack - updateTrack"))
}

// DeleteTrack is the resolver for the deleteTrack field.
func (r *mutationResolver) DeleteTrack(ctx context.Context, id int) (*model.Track, error) {
	panic(fmt.Errorf("not implemented: DeleteTrack - deleteTrack"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, data model.UserLogIn) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, data model.UserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// UpdateUserRole is the resolver for the updateUserRole field.
func (r *mutationResolver) UpdateUserRole(ctx context.Context, id int, role string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUserRole - updateUserRole"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int) (*model.User, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// LogIn is the resolver for the logIn field.
func (r *mutationResolver) LogIn(ctx context.Context, data model.UserLogIn) (string, error) {
	panic(fmt.Errorf("not implemented: LogIn - logIn"))
}

// LogOut is the resolver for the logOut field.
func (r *mutationResolver) LogOut(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: LogOut - logOut"))
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, data model.UserLogIn) (string, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// Drivers is the resolver for the drivers field.
func (r *queryResolver) Drivers(ctx context.Context, season *int) ([]*model.Driver, error) {
	var drivers []*model.Driver
	driver := model.Driver{
		ID:        0,
		Name:      "Name",
		Country:   "Country",
		BirthDate: "12-10-2023",
	}
	drivers = append(drivers, &driver)
	return drivers, nil
}

// Driver is the resolver for the driver field.
func (r *queryResolver) Driver(ctx context.Context, id int) (*model.Driver, error) {
	panic(fmt.Errorf("not implemented: Driver - driver"))
}

// DriversStandings is the resolver for the driversStandings field.
func (r *queryResolver) DriversStandings(ctx context.Context) ([]*model.Standings, error) {
	panic(fmt.Errorf("not implemented: DriversStandings - driversStandings"))
}

// GrandPrixes is the resolver for the grandPrixes field.
func (r *queryResolver) GrandPrixes(ctx context.Context, season *int) ([]*model.GrandPrix, error) {
	panic(fmt.Errorf("not implemented: GrandPrixes - grandPrixes"))
}

// GrandPrix is the resolver for the grandPrix field.
func (r *queryResolver) GrandPrix(ctx context.Context, id int) (*model.GrandPrix, error) {
	panic(fmt.Errorf("not implemented: GrandPrix - grandPrix"))
}

// QualResults is the resolver for the qualResults field.
func (r *queryResolver) QualResults(ctx context.Context, gpID int) ([]*model.QualResultView, error) {
	panic(fmt.Errorf("not implemented: QualResults - qualResults"))
}

// RaceResults is the resolver for the raceResults field.
func (r *queryResolver) RaceResults(ctx context.Context, gpID int) ([]*model.RaceResultView, error) {
	panic(fmt.Errorf("not implemented: RaceResults - raceResults"))
}

// Teams is the resolver for the teams field.
func (r *queryResolver) Teams(ctx context.Context) ([]*model.Team, error) {
	panic(fmt.Errorf("not implemented: Teams - teams"))
}

// Tracks is the resolver for the tracks field.
func (r *queryResolver) Tracks(ctx context.Context) ([]*model.Track, error) {
	panic(fmt.Errorf("not implemented: Tracks - tracks"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
